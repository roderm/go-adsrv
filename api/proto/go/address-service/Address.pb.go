// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/proto/services/Address.proto

package address_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	address "github.com/roderm/go-adsrv/api/proto/go/address"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("api/proto/services/Address.proto", fileDescriptor_91f4fbe0bba4008f) }

var fileDescriptor_91f4fbe0bba4008f = []byte{
	// 196 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x48, 0x2c, 0xc8, 0xd4,
	0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x2d, 0xd6, 0x77,
	0x4c, 0x49, 0x29, 0x4a, 0x2d, 0x2e, 0xd6, 0x03, 0x0b, 0x4b, 0x59, 0xa4, 0x67, 0x96, 0x64, 0x94,
	0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0x17, 0xe5, 0xa7, 0xa4, 0x16, 0xe5, 0xea, 0xa7, 0xe7, 0xeb,
	0x26, 0xa6, 0x14, 0x17, 0x95, 0xe9, 0x23, 0x34, 0x97, 0x54, 0x16, 0xa0, 0xeb, 0x34, 0xda, 0xc9,
	0xc8, 0xc5, 0x0e, 0x15, 0x11, 0x32, 0xe4, 0x62, 0x0e, 0x4e, 0x2d, 0x11, 0x12, 0xd1, 0x03, 0x6b,
	0xd4, 0x4b, 0x84, 0x2a, 0x0c, 0x4b, 0xcc, 0x29, 0x4d, 0x95, 0xc2, 0x2a, 0x2a, 0x64, 0xcd, 0xc5,
	0xec, 0x8e, 0x45, 0x8b, 0x6b, 0x6e, 0x41, 0x49, 0xa5, 0x94, 0x0c, 0x9a, 0x28, 0xd4, 0x1e, 0xff,
	0xa4, 0xac, 0xd4, 0xe4, 0x12, 0x03, 0x46, 0x21, 0x3b, 0x2e, 0xce, 0xe0, 0xd2, 0xa4, 0xe2, 0xe4,
	0xa2, 0xcc, 0xa4, 0x54, 0x21, 0x49, 0xec, 0x8a, 0x83, 0x4b, 0x93, 0xb0, 0x5b, 0x6d, 0xc0, 0xe8,
	0xe4, 0x19, 0xe5, 0x4e, 0x94, 0xbf, 0xd3, 0xf3, 0xf5, 0xa1, 0x5a, 0x75, 0xa1, 0xe1, 0x67, 0x8d,
	0xc6, 0x4f, 0x62, 0x03, 0xab, 0x34, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x6c, 0x29, 0xeb,
	0x6b, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AddressClient is the client API for Address service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AddressClient interface {
	Set(ctx context.Context, in *address.Value, opts ...grpc.CallOption) (*address.Value, error)
	Get(ctx context.Context, in *address.Empty, opts ...grpc.CallOption) (Address_GetClient, error)
	Subscribe(ctx context.Context, in *address.AddressSub, opts ...grpc.CallOption) (Address_SubscribeClient, error)
}

type addressClient struct {
	cc *grpc.ClientConn
}

func NewAddressClient(cc *grpc.ClientConn) AddressClient {
	return &addressClient{cc}
}

func (c *addressClient) Set(ctx context.Context, in *address.Value, opts ...grpc.CallOption) (*address.Value, error) {
	out := new(address.Value)
	err := c.cc.Invoke(ctx, "/Address/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressClient) Get(ctx context.Context, in *address.Empty, opts ...grpc.CallOption) (Address_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Address_serviceDesc.Streams[0], "/Address/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &addressGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Address_GetClient interface {
	Recv() (*address.AddressObject, error)
	grpc.ClientStream
}

type addressGetClient struct {
	grpc.ClientStream
}

func (x *addressGetClient) Recv() (*address.AddressObject, error) {
	m := new(address.AddressObject)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *addressClient) Subscribe(ctx context.Context, in *address.AddressSub, opts ...grpc.CallOption) (Address_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Address_serviceDesc.Streams[1], "/Address/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &addressSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Address_SubscribeClient interface {
	Recv() (*address.Value, error)
	grpc.ClientStream
}

type addressSubscribeClient struct {
	grpc.ClientStream
}

func (x *addressSubscribeClient) Recv() (*address.Value, error) {
	m := new(address.Value)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AddressServer is the server API for Address service.
type AddressServer interface {
	Set(context.Context, *address.Value) (*address.Value, error)
	Get(*address.Empty, Address_GetServer) error
	Subscribe(*address.AddressSub, Address_SubscribeServer) error
}

// UnimplementedAddressServer can be embedded to have forward compatible implementations.
type UnimplementedAddressServer struct {
}

func (*UnimplementedAddressServer) Set(ctx context.Context, req *address.Value) (*address.Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (*UnimplementedAddressServer) Get(req *address.Empty, srv Address_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedAddressServer) Subscribe(req *address.AddressSub, srv Address_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterAddressServer(s *grpc.Server, srv AddressServer) {
	s.RegisterService(&_Address_serviceDesc, srv)
}

func _Address_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(address.Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Address/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServer).Set(ctx, req.(*address.Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _Address_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(address.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AddressServer).Get(m, &addressGetServer{stream})
}

type Address_GetServer interface {
	Send(*address.AddressObject) error
	grpc.ServerStream
}

type addressGetServer struct {
	grpc.ServerStream
}

func (x *addressGetServer) Send(m *address.AddressObject) error {
	return x.ServerStream.SendMsg(m)
}

func _Address_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(address.AddressSub)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AddressServer).Subscribe(m, &addressSubscribeServer{stream})
}

type Address_SubscribeServer interface {
	Send(*address.Value) error
	grpc.ServerStream
}

type addressSubscribeServer struct {
	grpc.ServerStream
}

func (x *addressSubscribeServer) Send(m *address.Value) error {
	return x.ServerStream.SendMsg(m)
}

var _Address_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Address",
	HandlerType: (*AddressServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _Address_Set_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _Address_Get_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _Address_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/services/Address.proto",
}
