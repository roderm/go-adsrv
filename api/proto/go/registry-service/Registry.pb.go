// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/proto/services/Registry.proto

package registry_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	address "github.com/roderm/go-adsrv/api/proto/go/address"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("api/proto/services/Registry.proto", fileDescriptor_dda9b3572a097c43) }

var fileDescriptor_dda9b3572a097c43 = []byte{
	// 197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4c, 0x2c, 0xc8, 0xd4,
	0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x2d, 0xd6, 0x0f,
	0x4a, 0x4d, 0xcf, 0x2c, 0x2e, 0x29, 0xaa, 0xd4, 0x03, 0x8b, 0x4b, 0x59, 0xa4, 0x67, 0x96, 0x64,
	0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0x17, 0xe5, 0xa7, 0xa4, 0x16, 0xe5, 0xea, 0xa7, 0xe7,
	0xeb, 0x26, 0xa6, 0x14, 0x17, 0x95, 0xe9, 0x23, 0x74, 0x97, 0x54, 0x16, 0xa4, 0x16, 0xeb, 0x3b,
	0xa6, 0xa4, 0x14, 0xa5, 0x16, 0x17, 0x43, 0x74, 0x1a, 0x75, 0x32, 0x72, 0x71, 0xc0, 0x0c, 0x13,
	0x72, 0xe0, 0x62, 0xf3, 0xcc, 0x4b, 0xcb, 0x2f, 0xca, 0x15, 0x92, 0xd1, 0x03, 0x6b, 0xd6, 0x4b,
	0x84, 0x2a, 0x86, 0x6a, 0xf2, 0x4f, 0xca, 0x4a, 0x4d, 0x2e, 0x91, 0x12, 0x41, 0x93, 0x0d, 0x4b,
	0xcc, 0x29, 0x4d, 0xd5, 0x60, 0x34, 0x60, 0x14, 0xb2, 0xe6, 0xe2, 0x06, 0x73, 0x42, 0x0b, 0x52,
	0x12, 0x4b, 0x52, 0x85, 0xb0, 0x2a, 0xc4, 0xd0, 0xee, 0x9a, 0x5b, 0x50, 0x52, 0xa9, 0xc1, 0xe8,
	0xe4, 0x1d, 0xe5, 0x49, 0x94, 0x3f, 0xd2, 0xf3, 0xf5, 0x8b, 0xa0, 0x4e, 0xd6, 0x85, 0x86, 0x88,
	0x35, 0xba, 0x40, 0x12, 0x1b, 0x58, 0xad, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xb2, 0xb8, 0x15,
	0x00, 0x3e, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RegistryClient is the client API for Registry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistryClient interface {
	Inform(ctx context.Context, opts ...grpc.CallOption) (Registry_InformClient, error)
	ValueUpdate(ctx context.Context, opts ...grpc.CallOption) (Registry_ValueUpdateClient, error)
}

type registryClient struct {
	cc *grpc.ClientConn
}

func NewRegistryClient(cc *grpc.ClientConn) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) Inform(ctx context.Context, opts ...grpc.CallOption) (Registry_InformClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Registry_serviceDesc.Streams[0], "/Registry/Inform", opts...)
	if err != nil {
		return nil, err
	}
	x := &registryInformClient{stream}
	return x, nil
}

type Registry_InformClient interface {
	Send(*address.AddressObject) error
	Recv() (*address.Value, error)
	grpc.ClientStream
}

type registryInformClient struct {
	grpc.ClientStream
}

func (x *registryInformClient) Send(m *address.AddressObject) error {
	return x.ClientStream.SendMsg(m)
}

func (x *registryInformClient) Recv() (*address.Value, error) {
	m := new(address.Value)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *registryClient) ValueUpdate(ctx context.Context, opts ...grpc.CallOption) (Registry_ValueUpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Registry_serviceDesc.Streams[1], "/Registry/ValueUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &registryValueUpdateClient{stream}
	return x, nil
}

type Registry_ValueUpdateClient interface {
	Send(*address.Value) error
	CloseAndRecv() (*address.Empty, error)
	grpc.ClientStream
}

type registryValueUpdateClient struct {
	grpc.ClientStream
}

func (x *registryValueUpdateClient) Send(m *address.Value) error {
	return x.ClientStream.SendMsg(m)
}

func (x *registryValueUpdateClient) CloseAndRecv() (*address.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(address.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RegistryServer is the server API for Registry service.
type RegistryServer interface {
	Inform(Registry_InformServer) error
	ValueUpdate(Registry_ValueUpdateServer) error
}

// UnimplementedRegistryServer can be embedded to have forward compatible implementations.
type UnimplementedRegistryServer struct {
}

func (*UnimplementedRegistryServer) Inform(srv Registry_InformServer) error {
	return status.Errorf(codes.Unimplemented, "method Inform not implemented")
}
func (*UnimplementedRegistryServer) ValueUpdate(srv Registry_ValueUpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method ValueUpdate not implemented")
}

func RegisterRegistryServer(s *grpc.Server, srv RegistryServer) {
	s.RegisterService(&_Registry_serviceDesc, srv)
}

func _Registry_Inform_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RegistryServer).Inform(&registryInformServer{stream})
}

type Registry_InformServer interface {
	Send(*address.Value) error
	Recv() (*address.AddressObject, error)
	grpc.ServerStream
}

type registryInformServer struct {
	grpc.ServerStream
}

func (x *registryInformServer) Send(m *address.Value) error {
	return x.ServerStream.SendMsg(m)
}

func (x *registryInformServer) Recv() (*address.AddressObject, error) {
	m := new(address.AddressObject)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Registry_ValueUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RegistryServer).ValueUpdate(&registryValueUpdateServer{stream})
}

type Registry_ValueUpdateServer interface {
	SendAndClose(*address.Empty) error
	Recv() (*address.Value, error)
	grpc.ServerStream
}

type registryValueUpdateServer struct {
	grpc.ServerStream
}

func (x *registryValueUpdateServer) SendAndClose(m *address.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *registryValueUpdateServer) Recv() (*address.Value, error) {
	m := new(address.Value)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Registry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Inform",
			Handler:       _Registry_Inform_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ValueUpdate",
			Handler:       _Registry_ValueUpdate_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/proto/services/Registry.proto",
}
